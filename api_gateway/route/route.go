package route

import (
	"os"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger" // echo-swagger middleware

	"crowdfund/config"     // Import the config package
	_ "crowdfund/docs"     // docs is generated by Swag CLI, you have to import it.
	"crowdfund/handler"    // Import the handler package
	"crowdfund/model"      // Import the model package
	"crowdfund/mw"         // Import the middleware package
	"crowdfund/repository" // Import the repository package
)

func ExecRouter() {
	e := echo.New()

	// Initialize the repository
	userRepo := repository.NewUserRepository(config.DB)
	transRepo := repository.NewTransactionRepository(config.DB)
	donationRepo := repository.NewDonationRepository(config.DB)

	// Initialize the handlers
	userHandler := handler.NewUserHandler(userRepo)
	transHandler := handler.NewTransactionHandler(transRepo)
	donationHandler := handler.NewDonationHandler(donationRepo)

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.GET("/", rootShow) // Root route

	// Routes
	g := e.Group("/api/v1")

	//
	g.GET("/swagger/*", echoSwagger.WrapHandler) // Swagger documentation route

	// Users routes
	g.POST("/users/register", userHandler.CreateUser)                   // Create a new user
	g.POST("/users/login", userHandler.LoginUser)                       // login
	g.GET("/users/me", userHandler.GetUserByID, mw.CheckAuthMiddleware) // Get current user
	g.PUT("/users/me", userHandler.UpdateUser, mw.CheckAuthMiddleware)  // Update current user
	g.GET("/users/refresh-token", userHandler.RefreshToken)             // Get user by ID

	// Campaign routes
	// g.GET("/campaign", campaignHandler.GetAllCampaign)      // Get all campaigns
	// g.GET("/campaign/:id", campaignHandler.GetCampaignById) // Get campaign by ID
	// g.POST("/campaign/:id", campaignHandler.CreateCampaign) // Create campaign
	// g.PUT("/campaign/:id", campaignHandler.UpdateCampaign)  // Update campaign by ID

	// Blog routes
	// g.GET("/blogs", blogHandler.GetAllBlog)      //
	// g.GET("/blogs/:id", blogHandler.GetBlogById) //
	// g.POST("/blogs", blogHandler.CreateBlog)     //
	// g.PUT("/blogs/:id", blogHandler.UpdateBlog)  //

	// Report routes
	g.GET("/reports", donationHandler.GetAllDonations)          // Get reports donation all time
	g.GET("/reports/campaign", donationHandler.GetDonationByID) // Get reports donation campaign ranking
	g.GET("/reports/users", donationHandler.GetDonationByID)    // Get reports donation by users ranking

	// Donation routes
	g.GET("/donations", donationHandler.GetAllDonations)     // Get all donations
	g.GET("/donations/:id", donationHandler.GetDonationByID) // Get donation by ID
	g.POST("/donations", donationHandler.CreateDonation)     // Create donation
	g.PUT("/donations/:id", donationHandler.UpdateDonation)  // Update donation by ID

	// Transaction routes
	g.GET("/transactions", transHandler.GetAllTransaction, mw.CheckAuthMiddleware)                       // Get all transactions for a user
	g.GET("/transactions/:id", transHandler.GetTransactionByID, mw.CheckAuthMiddleware)                  // Get transaction by ID for a user
	g.POST("/transactions", transHandler.CreateTransaction, mw.CheckAuthMiddleware)                      // Create a new transaction
	g.PUT("/transactions/:id", transHandler.UpdateTransaction, mw.CheckAuthMiddleware)                   // Update transaction by ID, confirm to complete the transaction
	g.PUT("/transactions/check-update/:id", transHandler.CheckUpdateTransaction, mw.CheckAuthMiddleware) // Check and update transaction by ID

	// Scheduler routes
	// g.GET("/scheduler/update-transaction-status", schedulerHandler.updatePendingTransaction)   // update transaction status on pending transaction
	// g.GET("/scheduler/update-campaign-status", schedulerHandler.updateCampaignStatus) // update campaign to completed if the campaign deadline is reached

	// Start server
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port if not set in environment variables
	}
	e.Logger.Fatal(e.Start(":" + port))
}

func rootShow(c echo.Context) error {
	type welcome struct {
		BaseURL          string `json:"base_url"`
		DocumentationURL string `json:"documentation_url"`
	}

	rootURL := c.Request().Host + c.Request().RequestURI

	welcomeData := welcome{
		BaseURL:          rootURL + "api/v1/",
		DocumentationURL: rootURL + "api/v1/" + "swagger/index.html",
	}

	var response model.Response
	response.Status = 200
	response.Message = "Welcome to Crowdfunding API"
	response.Data = welcomeData

	return c.JSON(200, response)
}
