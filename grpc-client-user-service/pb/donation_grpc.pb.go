// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pb/donation.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DonationService_GetDonationByID_FullMethodName    = "/donation.DonationService/GetDonationByID"
	DonationService_GetAllDonations_FullMethodName    = "/donation.DonationService/GetAllDonations"
	DonationService_CreateDonation_FullMethodName     = "/donation.DonationService/CreateDonation"
	DonationService_UpdateDonation_FullMethodName     = "/donation.DonationService/UpdateDonation"
	DonationService_GetTransactionByID_FullMethodName = "/donation.DonationService/GetTransactionByID"
	DonationService_GetAllTransactions_FullMethodName = "/donation.DonationService/GetAllTransactions"
	DonationService_CreateTransaction_FullMethodName  = "/donation.DonationService/CreateTransaction"
	DonationService_UpdateTransaction_FullMethodName  = "/donation.DonationService/UpdateTransaction"
	DonationService_SyncTransaction_FullMethodName    = "/donation.DonationService/SyncTransaction"
)

// DonationServiceClient is the client API for DonationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonationServiceClient interface {
	GetDonationByID(ctx context.Context, in *DonationIdRequest, opts ...grpc.CallOption) (*DonationResponse, error)
	GetAllDonations(ctx context.Context, in *GetDonationsRequest, opts ...grpc.CallOption) (*GetDonationsResponse, error)
	CreateDonation(ctx context.Context, in *DonationRequest, opts ...grpc.CallOption) (*DonationResponse, error)
	UpdateDonation(ctx context.Context, in *DonationRequest, opts ...grpc.CallOption) (*DonationResponse, error)
	GetTransactionByID(ctx context.Context, in *TransactionIdRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetAllTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	UpdateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	SyncTransaction(ctx context.Context, in *TransactionIdRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type donationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDonationServiceClient(cc grpc.ClientConnInterface) DonationServiceClient {
	return &donationServiceClient{cc}
}

func (c *donationServiceClient) GetDonationByID(ctx context.Context, in *DonationIdRequest, opts ...grpc.CallOption) (*DonationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationResponse)
	err := c.cc.Invoke(ctx, DonationService_GetDonationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) GetAllDonations(ctx context.Context, in *GetDonationsRequest, opts ...grpc.CallOption) (*GetDonationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDonationsResponse)
	err := c.cc.Invoke(ctx, DonationService_GetAllDonations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) CreateDonation(ctx context.Context, in *DonationRequest, opts ...grpc.CallOption) (*DonationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationResponse)
	err := c.cc.Invoke(ctx, DonationService_CreateDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) UpdateDonation(ctx context.Context, in *DonationRequest, opts ...grpc.CallOption) (*DonationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationResponse)
	err := c.cc.Invoke(ctx, DonationService_UpdateDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) GetTransactionByID(ctx context.Context, in *TransactionIdRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, DonationService_GetTransactionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) GetAllTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, DonationService_GetAllTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, DonationService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) UpdateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, DonationService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationServiceClient) SyncTransaction(ctx context.Context, in *TransactionIdRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, DonationService_SyncTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonationServiceServer is the server API for DonationService service.
// All implementations must embed UnimplementedDonationServiceServer
// for forward compatibility.
type DonationServiceServer interface {
	GetDonationByID(context.Context, *DonationIdRequest) (*DonationResponse, error)
	GetAllDonations(context.Context, *GetDonationsRequest) (*GetDonationsResponse, error)
	CreateDonation(context.Context, *DonationRequest) (*DonationResponse, error)
	UpdateDonation(context.Context, *DonationRequest) (*DonationResponse, error)
	GetTransactionByID(context.Context, *TransactionIdRequest) (*TransactionResponse, error)
	GetAllTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	CreateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	UpdateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	SyncTransaction(context.Context, *TransactionIdRequest) (*TransactionResponse, error)
	mustEmbedUnimplementedDonationServiceServer()
}

// UnimplementedDonationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDonationServiceServer struct{}

func (UnimplementedDonationServiceServer) GetDonationByID(context.Context, *DonationIdRequest) (*DonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationByID not implemented")
}
func (UnimplementedDonationServiceServer) GetAllDonations(context.Context, *GetDonationsRequest) (*GetDonationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDonations not implemented")
}
func (UnimplementedDonationServiceServer) CreateDonation(context.Context, *DonationRequest) (*DonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonation not implemented")
}
func (UnimplementedDonationServiceServer) UpdateDonation(context.Context, *DonationRequest) (*DonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDonation not implemented")
}
func (UnimplementedDonationServiceServer) GetTransactionByID(context.Context, *TransactionIdRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByID not implemented")
}
func (UnimplementedDonationServiceServer) GetAllTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactions not implemented")
}
func (UnimplementedDonationServiceServer) CreateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedDonationServiceServer) UpdateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedDonationServiceServer) SyncTransaction(context.Context, *TransactionIdRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTransaction not implemented")
}
func (UnimplementedDonationServiceServer) mustEmbedUnimplementedDonationServiceServer() {}
func (UnimplementedDonationServiceServer) testEmbeddedByValue()                         {}

// UnsafeDonationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonationServiceServer will
// result in compilation errors.
type UnsafeDonationServiceServer interface {
	mustEmbedUnimplementedDonationServiceServer()
}

func RegisterDonationServiceServer(s grpc.ServiceRegistrar, srv DonationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDonationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DonationService_ServiceDesc, srv)
}

func _DonationService_GetDonationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetDonationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetDonationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetDonationByID(ctx, req.(*DonationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_GetAllDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetAllDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetAllDonations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetAllDonations(ctx, req.(*GetDonationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_CreateDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).CreateDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_CreateDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).CreateDonation(ctx, req.(*DonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_UpdateDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).UpdateDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_UpdateDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).UpdateDonation(ctx, req.(*DonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetTransactionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetTransactionByID(ctx, req.(*TransactionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_GetAllTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).GetAllTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_GetAllTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).GetAllTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).CreateTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).UpdateTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationService_SyncTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationServiceServer).SyncTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationService_SyncTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationServiceServer).SyncTransaction(ctx, req.(*TransactionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DonationService_ServiceDesc is the grpc.ServiceDesc for DonationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donation.DonationService",
	HandlerType: (*DonationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDonationByID",
			Handler:    _DonationService_GetDonationByID_Handler,
		},
		{
			MethodName: "GetAllDonations",
			Handler:    _DonationService_GetAllDonations_Handler,
		},
		{
			MethodName: "CreateDonation",
			Handler:    _DonationService_CreateDonation_Handler,
		},
		{
			MethodName: "UpdateDonation",
			Handler:    _DonationService_UpdateDonation_Handler,
		},
		{
			MethodName: "GetTransactionByID",
			Handler:    _DonationService_GetTransactionByID_Handler,
		},
		{
			MethodName: "GetAllTransactions",
			Handler:    _DonationService_GetAllTransactions_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _DonationService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _DonationService_UpdateTransaction_Handler,
		},
		{
			MethodName: "SyncTransaction",
			Handler:    _DonationService_SyncTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/donation.proto",
}
