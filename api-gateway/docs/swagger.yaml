basePath: /api/v1/
definitions:
  entity.Campaign:
    properties:
      category:
        type: string
      collected_amount:
        type: number
      created_at:
        type: string
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      min_donation:
        type: number
      status:
        type: string
      target_amount:
        type: number
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Donation:
    properties:
      amount:
        type: number
      campaign:
        $ref: '#/definitions/entity.Campaign'
      campaign_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  entity.Transaction:
    properties:
      amount:
        type: number
      created_at:
        type: string
      donation:
        $ref: '#/definitions/entity.Donation'
      donation_id:
        type: integer
      id:
        type: integer
      invoice_description:
        type: string
      invoice_id:
        type: string
      invoice_url:
        type: string
      payment_method:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  entity.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.UserRegister:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a crowdfunding API.
  title: Crowdfunding API
  version: "1.0"
paths:
  /donations:
    post:
      consumes:
      - application/json
      description: Create a new donation for a user
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Donation object
        in: body
        name: entity.Donation
        required: true
        schema:
          $ref: '#/definitions/entity.Donation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Create a new donation
      tags:
      - donations
  /donations/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific donation by its ID
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Donation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Get Donation details by Donation ID
      tags:
      - donations
    put:
      consumes:
      - application/json
      description: Get details of a specific donation by its ID
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Donation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Donation object
        in: body
        name: model.Donation
        required: true
        schema:
          $ref: '#/definitions/entity.Donation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Update a donation based on the invoice status
      tags:
      - donations
  /transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction for a user
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction object
        in: body
        name: model.Transaction
        required: true
        schema:
          $ref: '#/definitions/entity.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Create a new transaction
      tags:
      - transactions
  /transactions/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific transaction by its ID
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Get Transaction details by Transaction ID
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Get details of a specific transaction by its ID
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction object
        in: body
        name: model.Transaction
        required: true
        schema:
          $ref: '#/definitions/entity.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Update a transaction based on the invoice status
      tags:
      - transactions
  /transactions/check-update-transaction/{id}:
    put:
      consumes:
      - application/json
      description: Get details of a specific transaction by its ID and check its status
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction object
        in: body
        name: model.Transaction
        required: true
        schema:
          $ref: '#/definitions/entity.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Check and update a transaction based on the invoice status
      tags:
      - transactions
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate and return a token for the user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Login user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Current User Details
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Get Current User Details
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Update user details
      tags:
      - users
  /users/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh the access token using the refresh token
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Refresh user access token
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Response'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
